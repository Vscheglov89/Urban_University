'''Задача:

Выберите одну или несколько сторонних библиотек Python, например, requests, pandas, numpy, matplotlib, pillow.
После выбора библиотек(-и) изучите документацию к ней(ним), ознакомьтесь с их основными возможностями и функциями.
К каждой библиотеке дана ссылка на документацию ниже.

Если вы выбрали:
requests - запросить данные с сайта и вывести их в консоль.
pandas - считать данные из файла, выполнить простой анализ данных (на своё усмотрение) и вывести результаты в консоль.
numpy - создать массив чисел, выполнить математические операции с массивом и вывести результаты в консоль.
matplotlib - визуализировать данные с помощью библиотеки любым удобным для вас инструментом из библиотеки.
pillow - обработать изображение, например, изменить его размер, применить эффекты и сохранить в другой формат.
В приложении к ссылке на GitHub напишите комментарий о возможностях, которые предоставила вам выбранная библиотека
и как вы расширили возможности Python с её помощью.

Примечания:
Можете выбрать не более 3-х библиотек для изучения.
Желательно продемонстрировать от 3-х функций/классов/методов/операций из каждой выбранной библиотеки.'''

import requests
import numpy
import pandas


# URL :
url = 'https://iss.moex.com/iss/statistics/engines/currency/markets/selt/rates.json'

response = requests.get(url)

if response.status_code == 200:
    data = response.json()

    # Извлечение курса доллара, его изменения и даты торгов:
    usd = data['cbrf']['data'][0][3]  # (курс доллара).
    usd_change = data['cbrf']['data'][0][4]  # (величина изменения).
    usd_date = data['cbrf']['data'][0][5]  # (дата торгов).

    # Извлечение курса евро, его изменения и даты торгов:
    eur = data['cbrf']['data'][0][6]  # (курс евро).
    eur_change = data['cbrf']['data'][0][7]  # (величина изменения).
    eur_date = data['cbrf']['data'][0][8]  # (дата торгов).


    def rate_change(change):
        if change < 0:
            return f'уменьшился на'
        elif change > 0:
            return f'увеличился на'
        else:
            return f'не изменился:'


    print()
    print(
        f"Курс доллара: {usd} руб. по состоянию на {usd_date} (курс {rate_change(usd_change)} {abs(usd_change)} руб.)")
    print(f"Курс евро: {eur} руб. по состоянию на {eur_date} (курс {rate_change(eur_change)} {abs(eur_change)} руб.)")

    # Выводим данные при помощи библиотеки Pandas:
    print()
    print('************************************************')
    print(pandas.DataFrame({f'Курс валюты на {usd_date}': [usd, eur], 'Изменение курса': [usd_change, eur_change]},
                       index=['USD', 'EURO']))
else:
    print(f"Ошибка при получении данных: {response.status_code}")

# Построим таблицу:
print()
print('***************************************************')
df = pandas.DataFrame(numpy.random.randn(10, 5), columns=list("ABCDE"))
print(df)

# Выводим основные статистические данные табличных значений:
print()
print('************************************************************')
print(df.describe())

# Отсортируем значения в колонке 'A' в порядке убывания:
print()
print('***************************************************')
df_new = df.sort_values(by="A", ascending=False)
print(df_new)

